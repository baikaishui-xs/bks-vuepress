(window.webpackJsonp=window.webpackJsonp||[]).push([[379],{941:function(n,e,t){"use strict";t.r(e);var o=t(15),s=Object(o.a)({},(function(){var n=this.$createElement,e=this._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[[e("div",{staticClass:"container"},[e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[this._v("\x3c!-- 获取原生事件的事件对象 --\x3e\n\x3c!-- 如果绑定函数 fn(e){}，e 是事件对象 --\x3e\n\x3c!-- 如果绑定的是js表达式 $event，$event 是事件对象 --\x3e\n<h1 @click=\"$event.target.style.color='red'\">父组件"+this._s(this.count)+'</h1>\n\n\x3c!-- 获取自定义事件的事件对象  --\x3e\n\x3c!-- 特性：自定义事件没有事件对象  --\x3e\n\x3c!-- 如果绑定函数 fn(data){}，data 是触发自定义事件的传参 --\x3e\n\x3c!-- 如果绑定的是js表达式 $event，$event 是触发自定义事件的传参 --\x3e\n\n简写：当使用 v-bind 将数据传递给子组件，和 @update:自定义事件 通知父组件修改数据时，就可以简写\n\x3c!-- <Son :modelValue="count" @update:modelValue="count=$event" /> --\x3e\n<Son v-model="count" />  // 简写\n')])])])])],this._v(" "),e("script",[this._v("\n  import { ref } from 'vue'\n  import Son from './Son.vue'\n  export default {\n    name: 'App',\n    components: {\n      Son\n    },\n    setup () {\n      const count = ref(10)\n      return { count }\n    }\n  }\n")])],2)}),[],!1,null,null,null);e.default=s.exports}}]);