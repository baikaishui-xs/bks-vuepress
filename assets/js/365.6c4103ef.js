(window.webpackJsonp=window.webpackJsonp||[]).push([[365],{928:function(n,e,s){"use strict";s.r(e);var r=s(15),t=Object(r.a)({},(function(){var n=this,e=n.$createElement,s=n._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[s("p",[n._v("需求：对外提供用户列表的 API 接口服务")]),n._v(" "),s("p",[n._v("使用到的的技术：\n1、第三方包 Express 和 mysql2\n2、ES6 模块化\n3、Promise\n4、async/await 异步函数")]),n._v(" "),s("p",[n._v("步骤：\n（1）安装第三方包\nnpm install express@4.17.1 mysql2@2.2.5")]),n._v(" "),s("p",[n._v('（2）启用 ES6 模块化支持\n在 package.json 中声明 "type": "module"')]),n._v(" "),s("p",[n._v("-- 项目/app.js\n（3）创建基本的服务器\nimport express from 'express'\nimport musql from 'mysql2'")]),n._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[n._v("  const app = express()\n\n  app.listen(80, () => {\n    console.log('server running at http://127.0.0.1')\n  })\n")])])]),s("p",[n._v("-- 项目/db/index.js\n（4）创建 db 数据库操作模块\nconst pool = mysql.createPool({  // 返回值：数据库对象\nhost: '127.0.0.1',      // 数据库 地址\nport: 3306,             // 数据库 端口号\ndatabase: 'my_db_01',   // 数据库 名称\nuser: 'root',           // 数据库 用户名\npasswored: 'admin123',  // 数据库 密码\n})")]),n._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[n._v("  // 默认导出一个支持 Promise API 的 数据库对象\n  export default pool.promise()\n")])])]),s("p",[n._v("-- 项目/controller/user_ctrl.js\n（5）创建 user_ctrl 业务模块\nimport db from '../db/index.js'")]),n._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[n._v("export async function getAllUser(req, res) {\n\n  // db.query('查询用户信息的 sql语句') 的返回值为 Promise 实例对象，使用 await 修饰完毕后，db.query() 的返回值就变成一个数组了\n  // rows：查询的结果\n\n  // 问题：当这个 sql 语句报错时，会导致程序的崩溃\n  // 解决方法：使用 try 将可能产生错误的代码包裹起来，如果代码发送错误，会跳转到 catch 中进行错误处理\n\n  try {\n    const [rows] = await db.query('select id, username, nickname from ev_users')\n    res.send({\n      status: 0,  // 告诉客户端成功还是失败（0：成功）（1：失败）\n      message: '获取用户列表数据成功!',\n      data: rows,\n    })\n  } catch (e) {\n    // e：错误对象\n    res.send({ \n      status: 1,\n      message: '获取用户列表数据失败',\n      desc: e.message\n    })\n  }\n  \n  \n}\n")])])]),s("p",[n._v("-- 项目/router/user_router.js\n（6）创建 user_router 路由模块\nimport express from 'express'\nimport { getAllUser } from '../controller/user_ctrl.js'")]),n._v(" "),s("p",[n._v("// 创建 路由对象\nconst router = new express.Router()\n// 创建 路由规则\nrouter.get('/user', getAllUser)")]),n._v(" "),s("p",[n._v("export default router")]),n._v(" "),s("p",[n._v("-- 项目/app.js\n（7）挂载 路由规则")]),n._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[n._v("import userRouter from './router/user_router.js'\n\napp.use('/api', userRouter)\n")])])]),s("p",[n._v("测试：\n1、启动服务器 nodemon app.js\n2、打开 Postman，新建测试请求，并发起 GET 请求：http://127.0.0.1/api/user")]),n._v(" "),s("p",[n._v('服务器返回：\n{\n"status": 0,\n"message": "获取用户列表数据成功",\n"data": [\n{\n"id": 1,\n"username": "admin1",\n"nickname": null\n},\n{\n"id": 2,\n"username": "admin2",\n"nickname": "abc"\n}\n{\n"id": 3,\n"username": "admin3",\n"nickname": null\n}\n]\n}')])])}),[],!1,null,null,null);e.default=t.exports}}]);