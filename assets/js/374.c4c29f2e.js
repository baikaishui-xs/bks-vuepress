(window.webpackJsonp=window.webpackJsonp||[]).push([[374],{936:function(n,e,t){"use strict";t.r(e);var a=t(15),o=Object(a.a)({},(function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("p",[n._v("toRef 函数")]),n._v(" "),t("p",[n._v("作用：将响应式对象中的 单个 数据解构出来，并保留响应式")]),n._v(" "),t("p",[n._v("提示：使用解构或扩展运算符转换出来的数据虽然可以渲染到页面中，但并不是响应式的，只是普通数据")]),n._v(" "),t("p",[n._v("应用场景：只想使用变量，不想使用对象。    如：不想 obj.name 只想 name")]),n._v(" "),t("p",[n._v("例子：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v('<template>\n  <div class="container">\n    '+n._s(n.name)+" <button @click=\"updateName\">修改数据</button>\n  </div>\n</template>\n<script>\n  import { reactive, toRef } from 'vue'\n  export default {\n    name: 'App',\n    setup () {\n      const obj = reactive({\n        name: 'ls',\n        age: 10\n      })\n      console.log(obj)\n      const name = toRef(obj, 'name')\n      const updateName = () => {\n        console.log('updateName')\n        name.value = 'zs'\n      }\n\n      return {name, updateName}\n    }\n  }\n  <\/script>\n")])])]),t("p",[n._v("toRefs 函数")]),n._v(" "),t("p",[n._v("作用：将响应式对象中的 多个 数据解构出来，并保留响应式")])])}),[],!1,null,null,null);e.default=o.exports}}]);