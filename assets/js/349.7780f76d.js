(window.webpackJsonp=window.webpackJsonp||[]).push([[349],{911:function(n,e,a){"use strict";a.r(e);var t=a(15),s=Object(t.a)({},(function(){var n=this.$createElement,e=this._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[e("p",[this._v("前端路由：Hash地址 与 组件 之间的对应关系\n应用场景：在 SPA项目 中，不同组件之间的切换，要依赖于前端路由来完成\n工作方式：\n1、用户点击了页面上的路由链接\n2、导致了 URL 地址栏中的 Hash 值发生了变化\n3、前端路由监听了到 Hash 地址的变化\n4、前端路由把当前 Hash 地址对应的组件渲染到浏览器中\n提示：在项目中很少会自己封装路由，都是用 第三方库 来实现路由的 创建 和 监听    如：vue-router")]),this._v(" "),e("p",[this._v("需求：点击 首页、电影、关于 时，只显示对应的组件（简单的实现前端路由的原理 案例）\n使用步骤：\n-- App 组件\n"),[e("div",{staticClass:"app-conteiner"})]],2),this._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[this._v("    // （1）为点击的路由链接，设置 Hash 值\n      <a href=\"#/home\">首页</a>\n      <a href=\"#/movie\">电影</a>\n      <a href=\"#/about\">关于</a>\n\n      <hr />\n\n    // （2）定义动态组件\n      <component :is=\"comName\"></component>\n\n    </div>\n  </template>\n\n  <script>\n    export default {\n      data() {\n        return {\n          conName: 'Home'\n        }\n      },\n      created() {\n        // （3）在 created函数 中绑定 window.onhashchange事件 监听 Hash值 的变化\n        window.onhashchange = () => {\n\n          // （4）判断 Hash值 的变化，并修改 this.comName\n          switch (location.hash) {\n            case '#/home':\n              this.comName = 'Home'\n              break\n            case '#/movie':\n              this.comName = 'Movie'\n              break\n            case '#/about':\n              this.comName = 'About'\n              break\n          }\n        }\n      }\n    }\n  <\/script>")])])])])}),[],!1,null,null,null);e.default=s.exports}}]);