(window.webpackJsonp=window.webpackJsonp||[]).push([[336],{899:function(n,e,t){"use strict";t.r(e);var a=t(15),s=Object(a.a)({},(function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("p",[n._v("组件：将可复用的 UI 结构封装为组件，从而方便项目的开发和维护\n特性：后缀名为 vue 的都是组件")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("组件有三部分构成：\n    （1）template -> 组件的 模板结构\n    （2）script   -> 组件的 JS（可选）\n    （3）style    -> 组件的 样式（可选）\n")])])]),t("p",[n._v("常用组件库：element-ui、Vant")]),n._v(" "),t("p",[n._v("-- Test.vue")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v('<template>\n    <div>\n        <div class="test-box">\n        <h3>这是用户自定义的 Test.vue --- '+n._s(n.username)+'</h3>\n        <button @click="chagneName">修改用户名</button>\n        </div>\n\n        // 注意：template 中不能出现两个根节点    解决方法：在外层包一个根节点\n        <div>123</div>\n    </div>\n</template>\n\n<script>\n    // 默认导出。这是固定写法！\n    export default {\n\n        // 在使用 vue-devtools 进行项目调试的时候，自定义的组件名称可以清晰的区分每个组件\n        // 组件名使用 帕斯卡命名法\n        name: \'MyApp\',\n\n        // 当前组件的 数据\n        // 注意：组件中的 data 不能像之前一样 指向组件的实例对象，所以这个 data 必须是一个函数\n        data() {\n            // 在 return 对象中定义数据\n            return {\n                username: \'admin\'\n            }\n        },\n\n        // 当前组件的 方法\n        methods: {\n            chagneName() {\n                // 在组件中，this 就表示当前组件的实例对象\n                this.username = \'哇哈哈\'\n            }\n\n            // 当方法只有简单的一行时，适合写在标签中\n            <button @click="count += 1">+1</button>\n        },\n\n        // 当前组件的 侦听器\n        watch: {},\n\n        // 当前组件的 计算属性\n        computed: {},\n\n        // 当前组件的 过滤器\n        filters: {}\n\n    }\n<\/script>\n\n允许使用 less 语法\n    // 1、下载 npm i less -D\n    // 2、lang="less"：开启 less 语法\n<style lang="less">\n    .test-box {\n        background-color: pink;\n        h3 {\n            color: red;\n        }\n    }\n</style>\n')])])]),t("p",[n._v("注册组件：\n组件注册名称命名方式：\nkebab-case 命名法（俗称 短横线命名法  如：my-swiper）\nPascalCase 命名法（俗称 帕斯卡命名法 或 大驼峰命名法  如 MySwiper，每个单词首字母大写）（再使用时，可以写成 短横线命名法）（推荐）")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("全局组件：允许在任何组件中使用\n应用场景：组件使用频率很高时\n-- main.js\n    （1）导入需要全局注册的组件\n        import Swiper from './components/MySwiper.vue'\n        import Test from './components/Test.vue'\n\n    （2）调用 app.component() 方法注册全局组件\n        app.component(Swiper.name, Swiper)\n        app.component(Test.name, Test)\n\n局部组件：只能在当前组件中使用\n应用场景：组件使用频率很低时\n    （1）导入需要局部注册的组件\n        import Search from './components/MySearch.vue'\n\n    （2）在 export default 里的 components 节点中注册全局组件\n        export default {\n            components: {\n                Search.name: Search,\n            }\n        }\n")])])]),t("p",[n._v("知识点：组件的父子关系")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("作用：在一个组件中使用其它组件\n\n特性：\n    1、组件在封装好后，彼此之间是相互独立的\n    2、只有在使用组件的时候，才会产生父子关系\n\n使用步骤：\n    1、导入 子组件\n        import Left form '@/components/Left.vue'\n\n    2、在父组件的 components 节点中注册组件\n        export default {\n            components: {\n                Left,\n                Right\n            }\n        }\n\n    3、以标签形式使用注册的组件\n        <div class=\"box\">\n            <Left><Left>\n            <Right><Right>\n        </div>\n")])])]),t("p",[n._v("私有 子组件：\n特性：\n1、在其它组件中的 模板结构 中 不可以 使用该组件\n2、通过 components 注册的组件就是 私有子组件")]),n._v(" "),t("p",[n._v("全局 子组件：\n特性：\n1、在其它组件中的 模板结构 中 可以 使用该组件\n2、通过 Vue.component 注册的组件就是 全局子组件\n使用步骤：\n在 main.js 入口文件中操作\n1、导入 全局组件\nimport Count from '@/components/Count.vue'")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("        2、注册全局组件：Vue.component('注册后的组件名', 注册的组件) \n            Vue.component('MyCount', Count)\n\n        3、以标签形式使用注册的组件\n            <div class=\"box\">\n                <MyCount><MyCount>\n            </div>\n")])])]),t("p",[n._v("组件之间的样式冲突\n问题：默认组件中的 样式 会全局生效，导致组件之间的样式冲突 问题")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v('解决方法一：使用 自定义属性（data-v-标识符）\n    使用步骤：\n        1、定义 自定义属性\n        2、使用 属性选择器\n\n    -- 组件A\n        <template>\n            <div class="left-container" data-v-001>\n                <h3 data-v-001>Left 组件</h3>\n                <hr data-v-001></hr>\n                <MyCount :init="9" data-v-001></MyCount>\n            </div>\n        </template>\n        <style lang="less">\n            h3[v-data-001] {\n                color: red;\n            }\n        </style>\n\n    -- 组件B\n        <template>\n            <div class="left-container" data-v-002>\n                <h3 data-v-002>Left 组件</h3>\n                <hr data-v-002></hr>\n                <MyCount :init="9" data-v-002></MyCount>\n            </div>\n        </template>\n        <style lang="less">\n            h3[v-data-002] {\n                color: red;\n            }\n        </style>\n\n解决方法二：在 style 中添加 scoped 属性（推荐）\n    底层原理：内部自动 添加自定义属性 如解决方法一    如：h5[data-v-3c83f0b7]\n\n    -- 组件A\n        <template>\n            <div class="left-container">\n                <h3>Left 组件</h3>\n                <hr></hr>\n                <MyCount :init="9"></MyCount>\n            </div>\n        </template>\n        <style lang="less" scoped>\n            h3 {\n                color: red;\n            }\n        </style>\n\n    -- 组件B\n        <template>\n            <div class="left-container">\n                <h3>Left 组件</h3>\n                <hr></hr>\n                <MyCount :init="9"></MyCount>\n            </div>\n        </template>\n        <style lang="less" scoped>\n            h3 {\n                color: red;\n            }\n        </style>\n')])])]),t("p",[n._v("在 父组件中 给 子组件 添加样式\n方法：添加 /deep/（深度选择器）\n原理：属性选择器 后代选择器    如：[data-v-3c83f0b7] h5\n应用场景：修改 第三方组件库 的样式时使用 如：element-ui、Vant")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v('<style lang="less" scoped>\n    /deep/ h3 {\n        color: red;\n    }\n</style>\n')])])])])}),[],!1,null,null,null);e.default=s.exports}}]);