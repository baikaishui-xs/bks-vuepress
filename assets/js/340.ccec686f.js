(window.webpackJsonp=window.webpackJsonp||[]).push([[340],{902:function(n,t,e){"use strict";e.r(t);var s=e(15),i=Object(s.a)({},(function(){var n=this,t=n.$createElement,e=n._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("p",[n._v("作用：在不依赖于 jQuery 的情况下，获取 DOM元素 或 组件")]),n._v(" "),e("p",[n._v("特性：$ 开头的都是 Vue 实例的内置成员")]),n._v(" "),e("p",[n._v("一、获取 DOM 元素")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v('方式一：ref（推荐）\n\n    （1）获取单个元素\n        \b使用步骤：\n            1、在要获取的 DOM元素 中绑定 ref="标识符" 属性\n            2、使用 this.$refs.标识符 获取 DOM元素\n\n        <div ref="box">我是box</div>\n        this.$refs.box\n\n    （2）获取 v-for 遍历的多个元素\n        \b使用步骤：\n            1、在要获取的 DOM元素 中绑定 ref="li" 属性\n            2、使用 this.$refs.li 获取 DOM元素\n\n        <li v-for="i in 4" :key="i" ref="li">'+n._s(n.i)+'</li>\n        this.$refs.li\n        // 获取遍历中的其中一个元素：this.$refs.li[下标]\n\n方式二：$event 参数\n    使用步骤：\n        1、\b定义 $event 参数\n            <div data-index="11" click="handleClick(1, $event)">点击我试试</div>\n        2、使用 event 获取 DOM元素\n            methods: {\n                handleClick(index, event) {\n                    console.log(event)\n                }\n            }\n\n\n\n功能：点击按钮让 h1元素 变成红色\n使用步骤：\n（1）在要获取的 DOM元素 中绑定 ref="标识符" 属性\n（2）使用 this.$refs.标识符 获取 DOM元素\n\n<template>\n    <div class="app-container">\n\n        // （1）在要获取的 DOM元素 中绑定 ref="标识符" 属性\n        <h1 ref="myh12">APP 根组件</h1>\n\n        <button @click="showThis">打印 this</button>\n    </div>\n</template>\n\n<script>\n    export default {\n        methods: {\n            showThis() {\n\n                // （2）使用 this.$refs.标识符 获取 DOM元素\n                this.$refs.myh12.style.color = \'red\'\n            }\n        }\n    }\n<\/script>\n')])])]),e("p",[n._v('二、获取 子组件\n原理：相当于 子组件里的 this ，都是指向 子组件\n功能：点击父组件的重置按钮，让子组件的 count 数据重置\n使用步骤：\n（1）在 子组件标签 中绑定 ref="标识符" 属性\n（2）使用 this.$refs.标识符 获取 子组件')]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v('-- 父组件\n    <template>\n        <div class="app-container">\n    \n            // （1）在 子组件标签 中绑定 ref="标识符Ref" 属性\n            <Left ref="comLeftRef"></Left>\n\n            <button @click="onReser">重置</button>\n        </div>\n    </template>\n\n<script>\n    export default {\n        methods: {\n            onReset() {\n\n                // （2）使用 this.$refs.标识符 获取 子组件\n                this.$refs.comLeftRef.resetCount()\n            }\n        }\n    }\n<\/script>\n\n-- 子组件\n    <template>\n        <div class="left-container">\n    \n            <h3>'+n._s(n.count)+"</h3>\n\n        </div>\n    </template>\n\n    <script>\n        export default {\n            data() {\n                return {\n                    count: 8\n                }\n            },\n            methods: {\n                resetCount() {\n                    this.count = 0\n                }\n            }\n        }\n    <\/script>\n")])])]),e("p",[n._v("常见问题\n（1）功能：页面中有一个隐藏的表单元素，默认是隐藏状态，当点击按钮时，切换显示状态，并自动对焦\n报错：TypeError: Cannot read property 'focus' of undefined\n原理：因为组件生命周期在运行阶段，当数据发送变化时，还没有立刻渲染到页面，所以获取的这个 DOM元素不存在\n解决方法：放在 this.$nextTick(回调函数) 方法中\nthis.$nextTick 作用：当页面重新渲染后才会执行")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v('    methods: {\n        showInput() {\n            this.inputVisible = true,\n            this.$nextTick(() => {\n                this.$refs.iptRef.focus()\n            })\n        }\n    }\n    \n-- App.vue\n    \n    <input type="text" class="form-control" v-if="inputVisible" ref="ipt" />\n    <button type="button" v-else @click="showInput">展示 input 输入框</button>\n\n    data() {\n        return {\n            inputVisible: false\n        }\n    },\n    methods: {\n        showInput() {\n            this.inputVisible = true\n            this.$refs.ipt.focus()\n        }\n    }\n\n-- ')])])])])}),[],!1,null,null,null);t.default=i.exports}}]);