(window.webpackJsonp=window.webpackJsonp||[]).push([[263],{826:function(n,t,e){"use strict";e.r(t);var a=e(15),s=Object(a.a)({},(function(){var n=this,t=n.$createElement,e=n._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("p",[n._v("说明：组件与组件之间的数据共享")]),n._v(" "),e("p",[n._v("特性：可读可写")]),n._v(" "),e("p",[n._v("方案一：MobX。将共享数据存储在 Store 实例对象中")]),n._v(" "),e("ul",[e("li",[n._v("mobx-miniprogram 包：创建 Store 实例对象")]),n._v(" "),e("li",[n._v("mobx-miniprogram-bindings 包：把 Store 中的数据或方法，绑定到组件或页面中使用")])]),n._v(" "),e("p",[n._v("下载\n（1）下载包\nnpm i --save mobx-miniprogram@4.13.2 mobx-miniprogram-bindings@1.2.1")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v("（2）重新构建 npm\n  删除 miniprogram_npm 目录\n  重新构建：微信开发者工具 → 工具 → 构建 npm\n")])])]),e("p",[n._v("将 Store 中的成员绑定到 页面 中\n（1）创建 Store 实例对象，并共享出去（-- 根目录/新建 store/store.js）\nstore 目录：存储 MobX 文件")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v("  import { observable, action } from 'mobx-miniprogram'\n\n  export const store observable({\n    // 数据字段\n    numA: 1,\n    numB: 2\n\n    // 计算属性\n    get sum() {\n      return this.numA + this.numB\n    }\n\n    // action 方法：修改 store 中的数据\n    // step：外界传递过来的参数\n    updateNum1: action(function (step) {\n      this.numA += step\n    }),\n    updateNum2: action(function (step) {\n      this.numB += step\n    }),\n  })\n\n（2）将 Store 成员绑定到页面中（-- 页面.js）\n  import { createStoreBindings } from 'mobx-miniprogram-bindings'\n  import { store } from '../../store/store'\n\n  onLoad: function () {\n    this.storeBindings = createStoreBindings(this. {\n      // 数据源\n      store,\n\n      // 当前页面要使用的 数据\n      fields: ['numA', 'numB', 'sum'],\n\n      // 当前页面要使用的 方法\n      actions: ['updateNum1']\n    })\n  }\n\n（3）清理绑定的 Store 成员（-- 同上）\n  onUnload: function () {\n    this.createStoreBindings.destroyStoreBindings()\n  }\n\n（4）使用 Store 中的数据、修改 Store 中的数据\n  （-- 页面.wxml）\n    <view>"+n._s(n.numA)+" + "+n._s(n.numB)+" = "+n._s(n.sum)+'</view>\n\n    <van-button type="primary" bindtap="btnHandler1" data-step="'+n._s(1)+'">\n      numA + 1\n    </van-button>\n    <van-button type="danger" bindtap="btnHandler1" data-step="'+n._s(-1)+'">\n      numA - 1\n    </van-button>\n\n  （-- 页面.js）\n    btnHandler1(e) {\n      this.updateNum1(e.target.dataset.step)\n    }\n')])])]),e("p",[n._v("将 Store 中的成员绑定到 组件 中\n（1）将 Store 中的成员绑定到 组件 中（-- 组件.js）\nimport { storeBindingsBehavior } from 'mobx-miniprogram-bindings'\nimport { store } from '../../store/store'")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v("  Component({\n    behaviors: [storeBindingsBehavior],\n\n    storeBindings: {\n      // 数据源\n      store,\n\n      // 当前页面要使用的数据\n      fields: {   \n        sum: 'sum'\n      },\n\n      // 当前页面要使用的 方法\n      actions: {\n        updateNum2: 'updateNum2'\n      }\n    }\n  })\n\n\n（2）使用 Store 中的数据、修改 Store 中的数据\n  （-- 组件.wxml）\n    <view>"+n._s(n.numA)+" + "+n._s(n.numB)+" = "+n._s(n.sum)+'</view>\n\n    <van-button type="primary" bindtap="btnHandler2" data-step="'+n._s(1)+'">\n      numB + 1\n    </van-button>\n    <van-button type="danger" bindtap="btnHandler2" data-step="'+n._s(-1)+'">\n      numB - 1\n    </van-button>\n\n  （-- 组件.js）\n    methods: {\n      btnHandler2(e) {\n        this.updateNum2(e.target.dataset.step)\n      }\n    }\n')])])]),e("p",[n._v("方案二：将共享数据存储在 globalData\n使用步骤：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v("（1）将数据存储到 globalData 中（-- App.vue）\n  globalData: {\n    name: 'zcr'\n  }\n\n（2）通过 getApp().globalData.属性名 获取数据\n  getApp().globalData.name\n")])])]),e("p",[n._v("例子：\n（-- App.vue）\n"),e("script",[n._v("\nexport default {\nglobalData: {\nname: 'zcr'\n}\n}\n")])]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v('（-- index.vue）\n  <template>\n    <view class="content">\n      <view>\n        <text class="title">'+n._s(n.name)+"</text>\n      </view>\n    </view>\n  </template>\n\n  <script>\n  export default {\n    data() {\n      return {\n        name: ''\n      }\n    },\n    onLoad() {\n      this.name = getApp().globalData.name\n    }\n  }\n  <\/script>\n")])])])])}),[],!1,null,null,null);t.default=s.exports}}]);