(window.webpackJsonp=window.webpackJsonp||[]).push([[266],{829:function(n,e,s){"use strict";s.r(e);var a=s(15),t=Object(a.a)({},(function(){var n=this,e=n.$createElement,s=n._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[s("p",[n._v("属性：\nsuccess：接口调用成功的回调函数")]),n._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[n._v("fail：接口调用失败的回调函数\n\ncomplete：接口调用结束的回调函数（调用成功、失败都会执行）\n")])])]),s("p",[n._v("事件监听 API\n作用：监听某些事件的触发")]),n._v(" "),s("p",[n._v("特性：on 开头")]),n._v(" "),s("p",[n._v("wx.onWindowResize()\n触发条件：窗口尺寸发送变化后 触发")]),n._v(" "),s("p",[n._v("wx.onReachBottom()\n触发条件：上拉触底")]),n._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[n._v("作用：加载更多数据\n\n应用场景：整个页面进行滚动\n\n节流\n  作用：解决连续触发 上拉触底 事件，导致连续发送多个请求的问题\n\n  （1）定义节流阀\n    data: {\n      // 节流阀（true：当前正在进行数据请求）（false：当前没有任何数据请求）\n      isLoading: false\n    }\n    \n  （2）使用节流阀。发送请求时开启节流阀，响应数据后关闭节流阀\n    getData() {\n      this.setData({\n        isLoading: true\n      })\n      complete: () => {\n        this.setData({\n          isLoading: false\n        })\n      }\n    }\n\n  （3）根据节流阀，判断是否发起请求\n    onReachBottom: function() {\n      if (this.data.isLoading) return\n\n      this.getData()\n    }\n\n判断是否还有下一条数据\n  当该公式成立，则证明没有下一条数据：页面值 * 每页显示多少条数据 >= 总数据条数\n\n  使用步骤：\n    // 判断是否还有下一条数据\n    if(this.data.page * this.data.pageSize >= this.data.total) {\n      return wx.showToast({\n        title: '没有更多数据了！',\n        icon: 'none'\n      })\n    }\n")])])]),s("p",[n._v("onPullDownRefresh()\n触发条件：下拉刷新")]),n._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[n._v('作用：重新加载数据\n\n使用步骤：\n  （1）开启下拉刷新（-- 页面.json）\n    "enablePullDownRefresh": true\n\n  （2）配置样式（-- 同上）\n    "backgroundColor": "#efefef",\n    "backgroundTextStyle": "dark"\n\n  （3）执行完下拉刷新事件后，停止下拉刷新效果（-- 页面.js）\n    onPullDownRefresh: function () {\n      console.log(\'下拉刷新已触发\')\n      wx.stopPullDownRefresh()\n    }\n')])])]),s("p",[n._v("同步 API\n特性：\n（1）Sync 结尾\n（2）执行结果可以通过函数返回值直接获取，执行出错会抛出异常")]),n._v(" "),s("p",[n._v("wx.setStorageSync('key', 'value')\n作用：向本地存储中写入内容")]),n._v(" "),s("p",[n._v("uni.getSystemInfoSync()\n文档：https://uniapp.dcloud.io/api/system/info?id=getsysteminfosync")]),n._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[n._v("作用：获取系统相关信息\n")])])]),s("p",[n._v("异步 API\n特性：\n（1）需要通过 success、fail、complete 接收调用的结果")]),n._v(" "),s("p",[n._v("wx.request()\n作用：发起网络数据请求，通过 success 回调函数接收数据")]),n._v(" "),s("p",[n._v("wx.showLoading() / wx.hideLoading()\n作用：显示 loading 提示框\n作用：关闭 loading 提示框")]),n._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[n._v("例：\n  getData() {\n    wx.showLoading({\n      title: '数据加载中...'\n    })\n    wx.request({\n      url: 'https://...',\n      complete: () => {\n        wx.hideLoading({\n          complete: (res) => {}\n        })\n      }\n    })\n  }\n")])])]),s("p",[n._v("wx.setNavigationBarTitle()\n作用：动态设置当前页面的标题")]),n._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[n._v("例：\n  onReady: function () {\n    wx.setNavigationBarTitle({\n      title: '九十九物'\n    })\n  }\n")])])]),s("p",[n._v("wx.showToast()\n作用：显示消息提示框")]),n._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[n._v("属性：\n  title：提示内容\n\n  icon：图标（success：默认值。显示）（none：隐藏）\n\n  duration：提示延迟事件（默认：1500s）\n")])])]),s("p",[n._v("wx.chooseAddress()\n作用：获取用户收货地址。调起用户编辑收货地址原生界面，并在编辑完成后返回用户选择的地址。")]),n._v(" "),s("p",[n._v("其它（我也不知道属于什么 API）：\nscrolltolower：滚动条触底事件\n应用场景：scroll-view 容器中滚动")]),n._v(" "),s("p",[n._v("API Promise 化\n说明：小程序内置的 api 都是基于 回调函数 实现的，这容易导致 回调地狱的问题")]),n._v(" "),s("p",[n._v("作用：将 api 改造成基于 Promise 的异步APi，并解决回调地狱的问题")]),n._v(" "),s("p",[n._v("使用步骤：\n（1）下载 miniprogram-api-promise 第三方包\nnpm i --save miniprogram-api-promise@1.0.4")]),n._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[n._v("（2）重新构建 npm\n  删除 miniprogram_npm 目录\n  重新构建：微信开发者工具 → 工具 → 构建 npm\n\n（3）Promise 化（-- app.js）\n  import { promisifyAll } from 'miniprogaram-api-promise'\n\n  // 存放 Promise 化的 API\n  const wxp = wx.p = {}\n\n  // promisifyAll 作用：API Promise 化\n  // wx：微信顶级对象\n  promisifyAll(wx, wxp)\n  \n（4）使用 Promise 化后的 API\n  async getInfo() {\n    const { data: res } = await wx.p.request({\n      method: 'GET',\n      url: 'https://www.escook.cn/api/get',\n      data: { name: 'zs', age: 20 }\n    })\n  }")])])])])}),[],!1,null,null,null);e.default=t.exports}}]);